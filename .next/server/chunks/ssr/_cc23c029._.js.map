{"version":3,"sources":["turbopack:///[project]/components/layout/ProjectNotFound.tsx","turbopack:///[project]/services/projects/getProjectInfo.ts","turbopack:///[project]/node_modules/ccount/index.js","turbopack:///[project]/node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","turbopack:///[project]/node_modules/mdast-util-find-and-replace/lib/index.js","turbopack:///[project]/node_modules/mdast-util-gfm-autolink-literal/lib/index.js","turbopack:///[project]/node_modules/mdast-util-gfm-footnote/lib/index.js","turbopack:///[project]/node_modules/mdast-util-gfm-strikethrough/lib/index.js","turbopack:///[project]/node_modules/markdown-table/index.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/break.js","turbopack:///[project]/node_modules/longest-streak/index.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/code.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/definition.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/heading.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/html.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/image.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/link.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/list.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","turbopack:///[project]/node_modules/mdast-util-phrasing/lib/index.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/root.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/strong.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/text.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","turbopack:///[project]/node_modules/mdast-util-to-markdown/lib/handle/index.js","turbopack:///[project]/node_modules/mdast-util-gfm-table/lib/index.js","turbopack:///[project]/node_modules/mdast-util-gfm-task-list-item/lib/index.js","turbopack:///[project]/node_modules/mdast-util-gfm/lib/index.js","turbopack:///[project]/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","turbopack:///[project]/node_modules/micromark-extension-gfm-autolink-literal/lib/html.js","turbopack:///[project]/node_modules/micromark-extension-gfm-footnote/lib/syntax.js","turbopack:///[project]/node_modules/micromark-extension-gfm-footnote/lib/html.js","turbopack:///[project]/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","turbopack:///[project]/node_modules/micromark-extension-gfm-strikethrough/lib/html.js","turbopack:///[project]/node_modules/micromark-extension-gfm-table/lib/edit-map.js","turbopack:///[project]/node_modules/micromark-extension-gfm-table/lib/infer.js","turbopack:///[project]/node_modules/micromark-extension-gfm-table/lib/syntax.js","turbopack:///[project]/node_modules/micromark-extension-gfm-table/lib/html.js","turbopack:///[project]/node_modules/micromark-extension-gfm-tagfilter/lib/index.js","turbopack:///[project]/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","turbopack:///[project]/node_modules/micromark-extension-gfm-task-list-item/lib/html.js","turbopack:///[project]/node_modules/micromark-extension-gfm/index.js","turbopack:///[project]/node_modules/remark-gfm/lib/index.js","turbopack:///[project]/app/project/[id]/page.tsx"],"sourcesContent":["import { Link } from \"@mui/joy\";\nimport Box from \"@mui/joy/Box\";\nimport Button from \"@mui/joy/Button\";\nimport Typography from \"@mui/joy/Typography\";\n\nconst UserNotFound = () => {\n    return (\n        <Box\n            component=\"main\"\n            px={4}\n            py={{ xs: 4, sm: 24 }}\n            sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n            }}\n        >\n            <h1>This project cannot be found</h1>\n            <Typography\n                level=\"body-md\"\n                display=\"flex\"\n                alignItems={\"center\"}\n                flexDirection={\"column\"}\n                gap={2}\n                sx={{ textDecoration: \"none\" }}\n            >\n                This project may have been deleted or the link may be broken. But don't worry, you can discover new projects by clicking this button below.\n                <Button\n                    component={Link}\n                    href=\"/projects\"\n                    sx={{ width: \"fit-content\" }}\n                    aria-label=\"Discover new projects\"\n                >\n                    Discover new projects\n                </Button>\n            </Typography>\n        </Box>\n    );\n};\n\nexport default UserNotFound;\n","import { projectsData } from \"@/data/mockProjectData\";\nimport { Project } from \"@/types/types\";\n\nexport const getProjectInfo = (id: string) => {\n\tconst project: Project | undefined = projectsData.find(\n\t\t \n\t\t(project: Project) => project.id === id,\n\t);\n\treturn project;\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub autolink literal\n * when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub autolink literal when serializing to HTML.\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {undefined}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions;\n  const label = config.label || 'Footnotes';\n  const labelTagName = config.labelTagName || 'h2';\n  const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  const backLabel = config.backLabel || defaultBackLabel;\n  const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder');\n        let counts = this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || [];\n        const counts = this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM strikethrough when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support GFM strikethrough when serializing to HTML.\n */\nexport function gfmStrikethroughHtml() {\n  return {\n    enter: {\n      strikethrough() {\n        this.tag('<del>');\n      }\n    },\n    exit: {\n      strikethrough() {\n        this.tag('</del>');\n      }\n    }\n  };\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n};\n\n// To do: micromark@5: use `infer` here, when all events are exposed.\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub tables when serializing to HTML.\n */\nexport function gfmTableHtml() {\n  return {\n    enter: {\n      table(token) {\n        const tableAlign = token._align;\n        this.lineEndingIfNeeded();\n        this.tag('<table>');\n        this.setData('tableAlign', tableAlign);\n      },\n      tableBody() {\n        this.tag('<tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        if (align === undefined) {\n          // Capture results to ignore them.\n          this.buffer();\n        } else {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + align + '>');\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('<thead>');\n      },\n      tableHeader() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        this.lineEndingIfNeeded();\n        this.tag('<th' + align + '>');\n      },\n      tableRow() {\n        this.setData('tableColumn', 0);\n        this.lineEndingIfNeeded();\n        this.tag('<tr>');\n      }\n    },\n    exit: {\n      // Overwrite the default code text data handler to unescape escaped pipes when\n      // they are in tables.\n      codeTextData(token) {\n        let value = this.sliceSerialize(token);\n        if (this.getData('tableAlign')) {\n          value = value.replace(/\\\\([\\\\|])/g, replace);\n        }\n        this.raw(this.encode(value));\n      },\n      table() {\n        this.setData('tableAlign');\n        // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n        // but we do need to reset it to match a funky newline GH generates for\n        // list items combined with tables.\n        this.setData('slurpAllLineEndings');\n        this.lineEndingIfNeeded();\n        this.tag('</table>');\n      },\n      tableBody() {\n        this.lineEndingIfNeeded();\n        this.tag('</tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        if (tableColumn in tableAlign) {\n          this.tag('</td>');\n          this.setData('tableColumn', tableColumn + 1);\n        } else {\n          // Stop capturing.\n          this.resume();\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('</thead>');\n      },\n      tableHeader() {\n        const tableColumn = this.getData('tableColumn');\n        this.tag('</th>');\n        this.setData('tableColumn', tableColumn + 1);\n      },\n      tableRow() {\n        const tableAlign = this.getData('tableAlign');\n        let tableColumn = this.getData('tableColumn');\n        while (tableColumn < tableAlign.length) {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');\n          tableColumn++;\n        }\n        this.setData('tableColumn', tableColumn);\n        this.lineEndingIfNeeded();\n        this.tag('</tr>');\n      }\n    }\n  };\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Create an HTML extension for `micromark` to support GitHubs weird and\n * useless tagfilter when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to support\n *   GitHubs weird and useless tagfilter when serializing to HTML.\n */\nexport function gfmTagfilterHtml() {\n  return {\n    exit: {\n      htmlFlowData(token) {\n        exitHtmlData.call(this, token, reFlow)\n      },\n      htmlTextData(token) {\n        exitHtmlData.call(this, token, reText)\n      }\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n * @returns {undefined}\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItemHtml() {\n  return {\n    enter: {\n      taskListCheck() {\n        this.tag('<input type=\"checkbox\" disabled=\"\" ');\n      }\n    },\n    exit: {\n      taskListCheck() {\n        this.tag('/>');\n      },\n      taskListCheckValueChecked() {\n        this.tag('checked=\"\" ');\n      }\n    }\n  };\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","import ProjectNotFound from \"@/components/layout/ProjectNotFound\";\nimport { DeveloperInfo, Project } from \"@/types/types\";\nimport { getDeveloperInfo } from \"@/services/developers/getDeveloperInfo\";\nimport { getProjectInfo } from \"@/services/projects/getProjectInfo\";\nimport { Avatar, Box, Chip, Link, Typography } from \"@mui/joy\";\nimport Image from \"next/image\";\nimport Markdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport \"@/styles/project.css\";\n\nexport async function generateMetadata(props: {\n\tparams: Promise<{ params: { id: string } }>;\n}) {\n\t// @ts-ignore\n\tconst { id } = await props.params;\n\tconst project = getProjectInfo(id);\n\n\tif (!project) return { title: \"Project not found - DevShowcase\" };\n\n\treturn {\n\t\ttitle: `${project.title} - DevShowcase`,\n\t};\n}\n\nexport default async function ProjectProfile(props: {\n\tparams: Promise<{ params: { id: string } }>;\n}) {\n\tconst params = await props.params;\n\t// @ts-ignore\n\tconst { id } = params;\n\tconst project: Project | undefined = getProjectInfo(id);\n\tconst developer: DeveloperInfo | undefined = getDeveloperInfo(\n\t\t// @ts-ignore\n\t\tproject?.userId,\n\t);\n\n\tif (!project) return <ProjectNotFound />;\n\treturn (\n\t\t<Box\n\t\t\tpy={{ xs: 4, md: 12 }}\n\t\t\tpx=\"2\"\n\t\t\twidth={{xs: \"90%\"}}\n\t\t\tsx={{\n\t\t\t\tmargin: \"auto\",\n\t\t\t\tdisplay: \"flex\",\n\t\t\t\tflexDirection: \"column\",\n\t\t\t\tgap: 2,\n\t\t\t\tjustifyContent: \"center\",\n\t\t\t\talignItems: \"center\",\n\t\t\t}}\n\t\t>\n\t\t\t<Typography level=\"h1\">{project.title}</Typography>\n\t\t\t<Typography level=\"title-sm\">{project.description}</Typography>\n\t\t\t<Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\", py: 2, color: \"text.primary\" }}>\n\t\t\t\t<Avatar\n\t\t\t\t\tsrc={developer.avatar}\n\t\t\t\t\talt={developer.name + developer.surname}\n\t\t\t\t/>{\" \"}\n\t\t\t\t<Link href={`/developer/${project.userId}`} aria-label={`Go to ${developer.name} ${developer.surname}'s profile`}>\n\t\t\t\t\t{developer.name} {developer.surname}\n\t\t\t\t</Link>{\" \"}\n\t\t\t\t- <b>Published on</b>{\" \"}\n\t\t\t\t{new Date(project.publishedDate).toLocaleDateString(\"en-US\", {\n\t\t\t\t\tyear: \"numeric\",\n\t\t\t\t\tmonth: \"long\",\n\t\t\t\t\tday: \"numeric\",\n\t\t\t\t})}\n\t\t\t</Box>\n\t\t\t<Image className=\"project__markdown__cover\" src={project.image} alt={project.title} width={600} height={400} loading=\"lazy\" />\n\t\t\t<Box width={\"100%\"} className=\"markdown-body\" sx={{ color: \"text.primary\" }}>\n\t\t\t\t<Markdown remarkPlugins={[remarkGfm]}>\n\t\t\t\t\t{project.story}\n\t\t\t\t</Markdown>\n\t\t\t</Box>\n\t\t\t<Box\n\t\t\t\tsx={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\tgap: 2,\n\t\t\t\t}}\n\t\t\t\talignItems={{ lg: \"start\", sm: \"center\", xs: \"center\" }}\n\t\t\t\twidth=\"100%\"\n\t\t\t>\n\t\t\t\t<Typography level=\"h2\">Technologies used</Typography>\n\t\t\t\t<Box sx={{ display: \"flex\", gap: 0.5, alignItems: \"center\" }}>\n\t\t\t\t\t{project.technologies.map((tech, index) => (\n\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\t\tsx={{ borderRadius: \"10rem\", mx: 0.5 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<b>{tech}</b>\n\t\t\t\t\t\t</Chip>\n\t\t\t\t\t))}\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n"],"names":[],"mappings":"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","ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]}